import com.sun.javafx.geom.Point2D;
import javafx.scene.Group;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.shape.Rectangle;

import java.util.ArrayList;

/**
 * Classe qui stocke les données de map et de spawn pour la construction de chaque niveau
 */

public class Map {

    // Taille bloc ........... 40*40
    // Taille background ..... 1280*720
    // Taille pique .......... 32*32
    // Taille mini ........... 18 blocs * 32 blocs

    private static int width = 1280;
    private static int height = 720;
    private static int persoWidth = 30;
    private static int persoHeight = 30;
    private static int ammo = 20;

    public static void construct(Niveau n) {

        int id = n.getId();
        AvatarView avatar = n.getAvatar();
        AvatarMdl avatarMdl = avatar.getAvatar();
        Group root = n.getRoot();
        Group gameRoot = n.getGameRoot();

        // Création du background
        Group lvl1 = new Group();
        lvl1.getChildren().add(new Rectangle(0, 0, width * ((maps[id - 1].getTileMap()[0].length() / 64) + 2), height));
        for (int i = 0; i < (maps[id - 1].getTileMap()[0].length() / 64) + 2; i++) {
            ImageView bck = new ImageView(new Image("img/fondIngame.png"));
            AnimationTimerCustom timer = new AnimationTimerCustom(100) {
                double t = 0.0;
                boolean b = true;

                @Override
                public void handle() {
                    if (b) t = t + 0.1;
                    else t = t - 0.1;
                    if (t >= 1) b = false;
                    if (t <= 0) b = true;
                    bck.setOpacity(t);
                }
            };
            timer.start();
            n.getTimers().add(timer);
            bck.setX(width * i);
            lvl1.getChildren().addAll(bck);
        }

        // Création de l'avatar
        ImageView ava = new ImageView(new Image("./img/avatar.gif"));
        ava.setFitWidth(persoWidth);
        ava.setFitHeight(persoHeight);
        avatar.setView(ava);
        avatarMdl.setPoint(new Point2D(SaveSystem.getPosXFromSave(), SaveSystem.getPosYFromSave()));
        avatarMdl.setAmmo(ammo);

        gameRoot.getChildren().add(avatar.getView());
        root.getChildren().addAll(lvl1, gameRoot);

        if (id == 1){
            ImageView panneau = new ImageView(new Image("img/pressTab.png"));
            gameRoot.getChildren().add(panneau);
            panneau.setX(500);
            panneau.setY(600);
        }
    }

    /*
    private static MapData lvlX = new MapData(new String[]{
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8",
            "5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6",
            "5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6",
            "5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6"
    }, 100, 400);
    */

    private static MapData lvl1 = new MapData(new String[]{ // NE PLUS TOUCHER !!!
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,1,4,4,1,4,1,4,4,4,1,4,4,1,4,1,1,4,4,4,1,4,1,4,4,1,4,1,9,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,4,4,4,4,4,9,0,0,0,0,0,b,0,0,D,0,b,0,0,0,b,0,0,D,0,5,9,0,0,0,b,0,D,0,0,b,0,b,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,9,0,5,4,4,6,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,0,b,0,0,0,e,0,0,0,0,b,0,0,0,0,D,0,0,0,0,D,0,b,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,1,4,4,4,9,0,0,0,b,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,b,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,9,0,0,b,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,D,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,4,4,4,4,4,9,0,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,4,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,4,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,g,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,D,a,1,6,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,g,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,g,0,0,0,0,g,0,0,0,7,8,0,0,0,0,7,8,0,0,0,0,b,D,0,0,0,0,0,0,g,0,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,5,6,D,0,0,d,c,f,0,0,0,0,d,f,0,0,0,0,0,0,0,0,0,0,0,0,0,0,j,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,7,6,0,0,0,0,b,0,0,0,5,6,0,0,0,0,5,6,0,0,0,0,D,0,0,0,0,0,0,0,b,0,0,0,0,0,0,0,0,0,0,0,i,0,0,0,0,0,0,0,7,3,3,f,0,0,0,0,0,0,0,d,3,3,8,0,0,E,0,0,0,0,0,0,0,0,0,0,0,g,0,0,0,0,0,0,0,D,b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,g,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,7,8,0,0,0,0,F2,5,6,0,0,0,0,D,0,0,0,5,6,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,7,6,0,0,0,A,0,0,0,0,0,0,0,g,0,0,0,7,3,3,3,1,1,6,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,0,0,7,8,0,0,0,g,0,0,0,b,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,3,8,0,0,0,0,0,0,k",
            "7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,0,0,7,3,3,3,1,1,3,3,8,0,E,0,7,3,3,3,3,1,1,3,3,3,3,3,3,1,1,3,3,3,3,3,1,6,0,0,0,0,0,0,0,0,5,6,0,0,0,0,5,1,8,0,0,0,0,0,0,0,0,0,7,1,6,0,0,C,1,B,0,7,3,3,3,3,1,3,3,3,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,0,0,5,6,0,0,0,D,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,3,3,3,3,3,3,8",
            "5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,5,1,1,1,1,1,1,1,6,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,5,9,0,0,0,0,5,1,6,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,D,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,F,5,1,6,0,0,0,0,0,D,b,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,6",
            "5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,5,1,1,1,1,1,1,1,6,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,D,0,0,0,0,0,5,1,6,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,6",
            "5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,5,1,1,1,1,1,1,1,6,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,0,0,0,0,0,0,1,1,6,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,h,0,0,0,0,5,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,6"
    }, 100, 400);

    private static MapData lvl2 = new MapData(new String[]{ // NE PLUS TOUCHER !!!
            "k,0,a,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,4,4,4,1,1,1,1,1,1,1,1,1,4,4,4,1,1,1,1,1,1,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,a,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,1,1,1,1,1,6,D,0,0,0,D,5,1,4,4,1,1,1,9,0,0,0,a,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,a,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,6,0,0,0,0,0,b,D,0,0,a,1,6,0,0,0,0,0,a,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,a,4,4,1,1,1,1,1,1,1,1,4,9,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,D,5,1,1,1,9,0,0,0,0,0,D,0,0,0,0,b,D,0,0,0,0,0,0,5,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,a,4,4,4,4,4,4,9,0,0,0,0,0,0,0,0,0,7,1,1,6,0,0,0,0,0,0,0,0,0,0,0,5,1,1,6,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,0,a,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,H,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,6,0,0,0,0,0,0,0,0,0,0,0,5,1,1,6,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,0,0,0,0,0,0,0,g,0,0,0,0,0,d,c,c,3,3,3,3,3,3,3,3,3,3,3,3,3,f,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,6,0,A,0,0,0,0,0,0,0,0,0,a,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,b,0,0,0,0,0,0,0,0,0,0,0,0,7,1,8,0,0,0,0,0,0,0,a,4,4,1,1,1,1,1,1,1,1,4,9,0,0,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,6,A,b,A,7,3,3,3,8,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,5,1,6,0,0,0,0,0,0,0,0,0,0,a,4,4,1,1,1,4,9,0,0,0,0,C,1,B,0,0,d,3,3,3,3,3,3,3,c,c,f,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,8,0,0,0,b,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,a,4,9,0,0,0,0,0,0,0,D,0,0,0,0,a,4,1,1,1,4,9,0,0,0,0,0,0,0,0,0,7,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,1,1,1,4,4,4,4,4,1,1,1,4,1,1,1,1,6,0,0,0,b,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,4,9,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,3,1,1,1,1,1,9,0,0,0,0,0,a,4,9,0,a,1,1,1,6,0,0,0,b,0,0,0,5,1,1,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,j,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,G,0,7,3,3,3,3,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,a,4,4,9,0,0,0,D,0,7,3,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,3,3,3,1,1,1,1,1,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,7,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,6,0,0,0,0,0,0,0,0,G,0,0,0,0,0,7,8,0,0,0,0,a,4,4,1,1,1,1,1,1,1,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,7,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,3,3,3,3,3,8,0,0,0,0,0,7,3,3,1,1,3,8,0,0,0,0,0,a,4,4,4,4,1,1,1,1,1,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,8,0,0,0,0,0,0,0,k",
            "3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,m,0,0,0,7,8,0,0,0,0,0,0,0,0,7,3,3,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,5,1,1,1,1,1,1,3,3,8,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,3,3,3,8,0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,8,0,0,0,k",
            "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,0,0,0,0,0,7,1,1,3,3,8,0,0,0,7,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,3,8,0,0,i,0,0,5,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,8,0,0,0,0,v,0,0,0,0,0,0,0,u,u,0,0,0,0,0,7,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,8,0,k",
            "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,8,0,0,0,0,0,0,0,0,0,0,7,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,k",
            "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,k"
    }, 250, 1600);

    private static MapData lvl3 = new MapData(new String[]{ // NE PLUS TOUCHER !!!
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k,k,k,k,k,k,g,k,k,k,k,k,k,k,k,k,5,6,k,k,k,k,k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,f,0,0,0,0,0,0,0,5,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,4,9,0,0,0,0,0,A,0,7,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,d,3,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,7,3,3,1,3,1,1,1,6,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,3,3,3,8,0,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,a,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,a,1,1,1,1,1,1,1,3,3,f,0,0,0,E,0,0,d,1,1,1,f,0,0,E,0,0,a,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,4,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,7,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,8,0,0,0,0,a,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,0,5,1,9,0,0,0,0,0,0,0,b,D,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,0,a,4,4,1,1,9,0,0,0,0,E,0,0,0,0,0,0,0,0,0,7,3,3,1,1,3,3,8,0,0,0,0,0,0,7,1,1,1,8,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,d,3,1,1,1,1,f,0,0,0,0,a,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,D,b,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,a,1,1,3,3,3,8,0,0,0,0,0,0,0,0,0,0,a,9,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,1,1,1,1,8,0,0,0,E,0,5,1,1,1,6,0,0,0,0,0,A,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,3,f,0,0,0,0,0,a,1,1,1,6,0,0,0,E,0,0,5,4,1,4,9,0,0,0,0,0,0,0,0,0,0,0,D,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,),3,8,i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,f,0,0,0,0,a,1,1,1,9,0,0,0,7,3,1,8,0,0,0,E,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,3,3,3,3,3,f,0,0,0,0,0,0,a,9,0,0,E,0,0,0,0,a,1,9,D,0,0,0,0,0,0,D,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,*,+,+,+,+,+,+,1,1,3,3,8,0,0,0,7,3,f,0,0,0,0,0,0,0,0,A,0,0,0,0,a,4,4,4,4,1,1,1,1,1,6,0,0,E,0,0,0,a,1,9,0,0,0,0,a,1,1,9,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,3,f,0,0,0,0,a,1,1,1,4,9,0,0,0,E,0,0,0,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,0,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,*,+,+,+,1,1,1,1,1,1,1,3,3,3,1,9,0,0,0,0,0,0,0,7,3,1,8,0,0,0,0,0,0,0,0,a,4,4,1,1,9,0,0,0,0,0,0,0,e,0,0,0,0,0,0,a,9,0,0,0,0,0,0,j,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,d,3,3,3,3,3,3,3,3,3,c,f,0,0,0,a,9,0,0,0,0,0,0,5,1,9,0,0,0,0,0,0,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,4,1,1,1,1,1,1,1,1,1,1,4,9,0,0,0,0,0,7,3,3,+,+,+,+,3,3,3,8,0,0,0,0,0,0,0,a,9,0,0,0,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,a,1,1,1,4,4,1,4,9,0,0,0,0,0,0,0,0,0,A,0,0,0,D,e,0,0,0,0,0,7,3,3,1,3,3,3,3,3,3,8,0,0,A,0,0,0,0,0,0,0,7,+,+,3,1,8,0,A,0,A,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,8,0,0,0,0,0,0,0,7,3,3,8,0,0,0,0,a,4,4,1,1,1,1,4,1,9,0,0,0,0,0,0,7,+,+,+,+,+,+,+,+,+,+,+,3,3,8,0,0,0,0,0,0,0,0,0,7,1,3,8,0,A,0,0,0,0,0,0,0,7,3,3,3,8,0,0,0,0,0,0,0,k",
            "k,0,d,3,3,3,3,3,c,f,0,0,a,1,9,0,0,D,0,0,0,0,0,0,0,0,0,7,3,1,3,8,0,0,0,0,0,0,A,0,5,+,+,+,+,+,+,+,+,+,+,3,3,1,8,0,0,0,0,0,0,5,+,+,+,+,+,3,1,3,1,8,0,A,0,0,0,0,0,0,0,0,0,0,A,7,+,+,+,+,8,0,0,0,0,0,7,+,+,+,+,3,3,8,0,0,0,0,a,1,4,9,0,D,0,0,0,0,0,0,7,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,8,0,0,7,3,3,3,+,+,+,+,3,1,8,0,0,0,0,7,3,1,1,1,1,1,3,3,3,8,0,0,0,k",
            "k,0,0,a,4,1,4,9,0,0,0,0,0,e,0,0,0,0,0,0,0,0,A,0,7,3,3,+,+,+,+,+,3,8,0,0,7,3,1,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,8,0,0,7,+,+,+,+,+,+,+,+,+,+,+,3,1,3,8,0,0,0,0,0,7,3,3,1,+,+,+,+,+,+,3,8,0,0,7,+,+,+,+,+,+,+,+,8,0,0,0,0,D,0,0,0,0,0,0,7,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,+,+,0,7,3,1,1,1,1,1,1,1,1,1,1,1,8,0,0,k",
            "k,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,3,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,6,0,0,5,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,3,3,3,3,3,3,3,3,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,0,0,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,k",
            "k,0,0,0,0,0,0,0,0,0,k,k,k,k,k,k,k,k,k,k,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,k,k,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,k"
    }, 100, 400);

    private static MapData lvl4 = new MapData(new String[]{ // ready player one like
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k,k,k,k,k,k,g,k,k,k,k,k,k,k,k,k,5,6,k,k,k,k,k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,f,0,0,0,0,0,0,0,5,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,4,9,0,0,0,0,0,0,0,7,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,7,3,3,3,3,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,E,0,0,0,0,7,1,1,1,3,3,3,8,0,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,a,1,1,1,9,0,0,0,0,0,0,0,0,0,0,m,0,0,0,0,0,0,0,0,d,1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,m,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,a,1,1,1,1,1,1,1,3,3,f,0,0,0,0,0,0,d,1,1,1,f,0,0,0,0,0,a,1,9,0,0,0,0,0,0,0,0,0,0,0,H,0,0,0,0,0,0,0,0,0,a,4,1,1,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,8,0,0,0,0,a,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,0,a,1,9,0,0,0,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,7,3,8,0,0,0,0,0,0,0,0,0,0,0,a,4,4,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,1,1,3,3,8,0,0,0,0,0,0,7,1,1,1,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,1,1,1,1,f,0,0,0,0,a,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,1,1,3,3,3,8,0,0,0,0,0,0,0,0,0,0,a,9,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,1,1,1,1,1,1,1,1,8,0,0,0,0,0,5,1,1,1,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,F,0,0,0,0,0,d,3,3,f,0,0,0,0,0,a,1,1,1,9,0,0,0,0,0,0,a,4,1,4,9,E,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,3,3,8,i,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,H,5,1,1,1,1,1,1,1,1,1,1,f,0,0,0,0,a,1,1,1,9,0,0,0,7,3,3,8,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,d,3,3,3,3,3,3,f,0,0,0,0,0,0,a,9,0,0,0,0,0,0,0,a,1,9,0,0,0,0,0,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,a,1,1,1,1,1,1,1,1,3,3,8,0,0,0,7,3,f,0,0,0,0,0,0,0,0,0,0,0,0,H,a,4,4,4,4,1,1,1,1,1,6,0,0,0,0,0,0,a,1,9,0,0,0,0,a,1,1,9,0,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,G,0,0,0,0,0,0,0,0,0,d,3,3,f,0,0,0,0,a,1,1,1,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,H,0,0,0,0,a,1,1,1,1,1,1,1,1,1,1,3,3,3,1,9,0,0,0,0,0,0,0,7,3,3,8,0,0,0,0,0,D,0,0,a,4,4,1,1,9,0,0,0,0,0,0,0,e,0,0,0,0,0,0,a,9,0,0,0,0,0,0,j,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,0,d,3,3,3,3,3,3,3,3,3,c,f,0,0,0,a,9,0,0,0,0,0,0,a,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,H,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,H,0,0,0,0,a,4,1,1,1,1,1,1,1,1,1,1,4,9,0,0,0,0,0,7,3,3,+,+,+,+,3,3,3,8,0,0,0,0,0,D,0,a,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,H,0,0,0,0,0,0,0,0,0,k",
            "k,0,0,0,0,0,0,0,0,F,0,a,1,1,1,4,4,4,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,e,0,0,0,0,0,7,3,3,3,3,3,3,3,3,3,8,0,0,0,0,0,0,0,0,0,0,7,+,+,3,3,8,E,0,E,u,0,0,0,0,0,0,0,0,0,0,0,0,0,0,E,7,3,3,8,E,0,0,0,0,0,0,7,3,3,8,0,0,0,0,a,4,4,1,1,1,1,4,4,9,0,0,0,0,0,G,7,+,+,+,+,+,+,+,+,+,+,+,3,3,8,0,0,0,0,0,0,0,0,0,7,3,3,8,0,0,0,0,0,0,0,0,0,7,3,3,3,8,0,0,0,0,0,0,0,k",
            "k,0,d,3,3,3,3,3,c,f,0,0,a,1,9,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,3,8,0,0,0,0,0,0,0,0,5,+,+,+,+,+,+,+,+,+,+,3,3,3,8,0,0,0,0,0,0,5,+,+,+,+,+,3,3,3,3,8,E,E,0,0,0,0,0,0,0,0,0,0,0,7,+,+,+,+,8,0,0,0,0,0,7,+,+,+,+,3,3,8,0,0,0,0,a,4,4,9,0,0,0,0,0,0,0,0,7,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,8,0,0,7,3,3,3,+,+,+,+,3,3,8,0,0,0,0,7,3,1,1,1,1,1,3,3,3,8,0,0,0,k",
            "k,0,0,a,4,1,4,9,0,0,0,0,0,e,0,0,0,0,0,0,0,m,0,0,7,3,3,+,+,+,+,+,3,8,E,E,7,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,8,E,E,7,+,+,+,+,+,+,+,+,+,+,+,3,3,3,8,0,G,0,G,0,7,3,3,3,+,+,+,+,+,+,3,8,E,E,7,+,+,+,+,+,+,+,+,8,0,0,0,0,0,0,0,0,0,0,H,7,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,+,E,E,7,3,1,1,1,1,1,1,1,1,1,1,1,8,0,0,k",
            "k,0,0,0,0,e,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,3,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,3,3,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,3,3,+,+,+,+,+,+,+,+,+,+,3,3,3,3,3,3,3,3,3,3,3,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,0,k",
            "k,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,k"
    }, 100, 400);


    public static MapData[] maps = {lvl1, lvl2, lvl3,lvl4};

    public static void buildMap(String[] niveauArch, Niveau n) {
        Group gameRoot = n.getGameRoot();
        ArrayList<ObstacleView> obstacle = n.getObstacle();
        int obstacleHeight = 40;
        int obstacleWidth = 40;


        for (int i = 0; i < niveauArch.length; i++) {
            String line = niveauArch[i];
            String[] tab = line.split(",");
            for (int j = 0; j < tab.length; j++) {
                switch (tab[j]) {

                    // PAS DE BLOC
                    case "0":
                        break;

                    // BLOCS TERRAIN
                    case "1": // bloc_full
                        ObstacleView bloc_full = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 0);
                        gameRoot.getChildren().add(bloc_full.getView());
                        obstacle.add(bloc_full);
                        break;
                    case "+": // bloc_full_nc
                        ObstacleView bloc_full_nc = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 0);
                        gameRoot.getChildren().add(bloc_full_nc.getView());
                        break;
                    case "2": //  bloc_invfull
                        ObstacleView bloc_invfull = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 1);
                        gameRoot.getChildren().add(bloc_invfull.getView());
                        obstacle.add(bloc_invfull);
                        break;
                    case "3": // bloc_up
                        ObstacleView bloc_up = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 2);
                        gameRoot.getChildren().add(bloc_up.getView());
                        obstacle.add(bloc_up);
                        break;
                    case ")": // bloc_up_nc
                        ObstacleView bloc_up_nc = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 2);
                        gameRoot.getChildren().add(bloc_up_nc.getView());
                        break;
                    case "4": // bloc_down
                        ObstacleView bloc_down = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 3);
                        gameRoot.getChildren().add(bloc_down.getView());
                        obstacle.add(bloc_down);
                        break;
                    case "5": // bloc_right
                        ObstacleView bloc_right = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 4);
                        gameRoot.getChildren().add(bloc_right.getView());
                        obstacle.add(bloc_right);
                        break;
                    case "6": // bloc_left
                        ObstacleView bloc_left = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 5);
                        gameRoot.getChildren().add(bloc_left.getView());
                        obstacle.add(bloc_left);
                        break;
                    case "7": // bloc_upleft
                        ObstacleView bloc_upleft = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 6);
                        gameRoot.getChildren().add(bloc_upleft.getView());
                        obstacle.add(bloc_upleft);
                        break;
                    case "-": // bloc_upleft_nocontact
                        ObstacleView bloc_upleft_nc = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 6);
                        gameRoot.getChildren().add(bloc_upleft_nc.getView());
                        break;
                    case "8": // bloc_upright
                        ObstacleView bloc_upright = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 7);
                        gameRoot.getChildren().add(bloc_upright.getView());
                        obstacle.add(bloc_upright);
                        break;
                    case "9": // bloc_downright
                        ObstacleView bloc_downright = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 8);
                        gameRoot.getChildren().add(bloc_downright.getView());
                        obstacle.add(bloc_downright);
                        break;
                    case "a": // bloc_downleft
                        ObstacleView bloc_downleft = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 9);
                        gameRoot.getChildren().add(bloc_downleft.getView());
                        obstacle.add(bloc_downleft);
                        break;
                    case "*": // bloc_downleft_nc
                        ObstacleView bloc_downleft_nc = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 9);
                        gameRoot.getChildren().add(bloc_downleft_nc.getView());
                        break;
                    case "b": // bloc_leftright
                        ObstacleView bloc_leftright = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 10);
                        gameRoot.getChildren().add(bloc_leftright.getView());
                        obstacle.add(bloc_leftright);
                        break;
                    case "c": // bloc_updown
                        ObstacleView bloc_updown = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 11);
                        gameRoot.getChildren().add(bloc_updown.getView());
                        obstacle.add(bloc_updown);
                        break;
                    case "d": // bloc_invright
                        ObstacleView bloc_invright = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 12);
                        gameRoot.getChildren().add(bloc_invright.getView());
                        obstacle.add(bloc_invright);
                        break;
                    case "e": // bloc_invup
                        ObstacleView bloc_invup = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 13);
                        gameRoot.getChildren().add(bloc_invup.getView());
                        obstacle.add(bloc_invup);
                        break;
                    case "f": // bloc_invleft
                        ObstacleView bloc_invleft = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 14);
                        gameRoot.getChildren().add(bloc_invleft.getView());
                        obstacle.add(bloc_invleft);
                        break;
                    case "g": // bloc_invdown
                        ObstacleView bloc_invdown = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 15);
                        gameRoot.getChildren().add(bloc_invdown.getView());
                        obstacle.add(bloc_invdown);
                        break;

                    // BLOCS SPÉCIAUX
                    case "h": // bloc_jump
                        ObstacleTrampolineView bloc_jump = new ObstacleTrampolineView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth));
                        gameRoot.getChildren().add(bloc_jump.getView());
                        obstacle.add(bloc_jump);
                        break;
                    case "i": // bloc_checkpoint
                        ObstacleCheckpointView bloc_checkpoint = new ObstacleCheckpointView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth));
                        gameRoot.getChildren().add(bloc_checkpoint.getView());
                        obstacle.add(bloc_checkpoint);
                        break;
                    case "j": // bloc_next
                        n.setNextLevel(new ObstacleNextLevel(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight + 5, i * obstacleWidth + 5)));
                        gameRoot.getChildren().add(n.getNextLevel().getView());
                        obstacle.add(n.getNextLevel());
                        break;
                    case "k": // bloc_invisible
                        ObstacleView bloc_invisible = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 16);
                        gameRoot.getChildren().add(bloc_invisible.getView());
                        obstacle.add(bloc_invisible);
                        break;
                    case "l": // bloc_chrono (non utilisé, supprimé)
                    case "m": // weapon
                        ArmeView weapon = new ArmeView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight + 10, i * obstacleWidth + 10));
                        gameRoot.getChildren().add(weapon.getView());
                        obstacle.add(weapon);
                        break;
                    case "n": // bloc_next_spé
                        ObstacleView bloc_invfull2 = new ObstacleView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth), 1);
                        gameRoot.getChildren().add(bloc_invfull2.getView());
                        break;
                    case "o": // bloc_bonus
                        ObstacleBonusView bloc_bonus = new ObstacleBonusView(new ObstacleMdl(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth));
                        gameRoot.getChildren().add(bloc_bonus.getView());
                        obstacle.add(bloc_bonus);
                        break;
                    case "p": // ???
                        break;
                    case "q": // ???
                        break;
                    case "r": // ???
                        break;
                    case "s": // ???
                        break;

                    // BLOC MOUVEMENT
                    case "u": // bloc_mv_hor (01)
                        ObstacleNonStableView bloc_mv_hor = new ObstacleNonStableView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 200, 2000, true));
                        gameRoot.getChildren().add(bloc_mv_hor.getView());
                        obstacle.add(bloc_mv_hor);
                        break;
                    case "u0": // bloc_mv_hor (02), pour un 2e bloc_mv
                        ObstacleNonStableView bloc_mv_hor1 = new ObstacleNonStableView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 200, 2000, true));
                        gameRoot.getChildren().add(bloc_mv_hor1.getView());
                        obstacle.add(bloc_mv_hor1);
                        break;
                    case "v": // bloc_mv_ver (01)
                        ObstacleNonStableView bloc_mv_ver = new ObstacleNonStableView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 200, 2000, false));
                        gameRoot.getChildren().add(bloc_mv_ver.getView());
                        obstacle.add(bloc_mv_ver);
                        break;
                    case "v0": // bloc_mv_ver (02), pour un 2e bloc_mv
                        ObstacleNonStableView bloc_mv_ver1 = new ObstacleNonStableView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 200, 2000, false));
                        gameRoot.getChildren().add(bloc_mv_ver1.getView());
                        obstacle.add(bloc_mv_ver1);
                        break;
                    case "w": // bloc_mv_contact
                        ObstacleNonStable2View bloc_mv_contact = new ObstacleNonStable2View(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 0, 0, true));
                        gameRoot.getChildren().add(bloc_mv_contact.getView());
                        obstacle.add(bloc_mv_contact);
                        break;
                    case "x": // ???
                        break;
                    case "y": // ???
                        break;
                    case "z": // ???
                        break;

                    // BLOC ENNEMIS

                    case "A": // pike_down
                        ObstaclePiegeView pike_down = new ObstaclePiegeView(new ObstacleMdl(0, 0, j * obstacleHeight, i * obstacleWidth), 1);
                        gameRoot.getChildren().add(pike_down.getView());
                        obstacle.add(pike_down);
                        break;
                    case "B": // pike_left
                        ObstaclePiegeView pike_left = new ObstaclePiegeView(new ObstacleMdl(0, 0, j * obstacleHeight, i * obstacleWidth), 2);
                        gameRoot.getChildren().add(pike_left.getView());
                        obstacle.add(pike_left);
                        break;
                    case "C": // pike_right
                        ObstaclePiegeView pike_right = new ObstaclePiegeView(new ObstacleMdl(0, 0, j * obstacleHeight, i * obstacleWidth), 3);
                        gameRoot.getChildren().add(pike_right.getView());
                        obstacle.add(pike_right);
                        break;
                    case "D": // pike_up
                        ObstaclePiegeView pike_up = new ObstaclePiegeView(new ObstacleMdl(0, 0, j * obstacleHeight, i * obstacleWidth), 4);
                        gameRoot.getChildren().add(pike_up.getView());
                        obstacle.add(pike_up);
                        break;
                    case "E": // pike_zero
                        ObstaclePiegeView pike_zero = new ObstaclePiegeView(new ObstacleMdl(0, 0, j * obstacleHeight + 4, i * obstacleWidth + 4), 5);
                        gameRoot.getChildren().add(pike_zero.getView());
                        obstacle.add(pike_zero);
                        break;
                    case "F": // ennemi_mv_hor (01)
                        ObstacleMortView ennemi_mv_ver = new ObstacleMortView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 320, 1300, true), 2);
                        gameRoot.getChildren().add(ennemi_mv_ver.getView());
                        obstacle.add(ennemi_mv_ver);
                        break;
                        case "F2": // ennemi_mv_hor (01)
                        ObstacleMortView ennemi_mv_ver2 = new ObstacleMortView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 150, 1000, true), 2);
                        gameRoot.getChildren().add(ennemi_mv_ver2.getView());
                        obstacle.add(ennemi_mv_ver2);
                        break;
                    case "G": // ennemi_mv_ver (01)
                        ObstacleMortView ennemi_mv_hor = new ObstacleMortView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 150, 1000, false), 1);
                        gameRoot.getChildren().add(ennemi_mv_hor.getView());
                        obstacle.add(ennemi_mv_hor);
                        break;
                    case "H": // ennemi_tir_mv (01)
                        ObstacleEnnemitirView ennemi_tir_mv = new ObstacleEnnemitirView(new ObstacleNonStable(obstacleWidth, obstacleHeight, j * obstacleHeight, i * obstacleWidth, 400, 5000, true));
                        gameRoot.getChildren().add(ennemi_tir_mv.getView());
                        obstacle.add(ennemi_tir_mv);
                        break;
                    case "I":
                        break;
                    case "J":
                        break;
                    case "K":
                        break;
                    case "L":
                        break;
                    case "M":
                        break;
                    case "N":
                        break;
                    case "O":
                        break;
                    case "P":
                        break;
                    case "Q":
                        break;
                    case "R":
                        break;
                    case "S":
                        break;
                    case "T":
                        break;
                    case "U":
                        break;
                    case "V":
                        break;
                    case "W":
                        break;
                    case "X":
                        break;
                    case "Y":
                        break;
                    case "Z":
                        break;
                }
            }
        }
        for (ObstacleView ob : obstacle) {
            if (ob instanceof ObstacleNonStableView) {
                if (((ObstacleNonStable) ob.getModele()).getVertOuHor()) {
                    ((ObstacleNonStableView) ob).avancerH();
                } else {
                    ((ObstacleNonStableView) ob).avancerV();
                }
            }
        }
    }

    public static class MapData {
        private final String[] tileMap;
        private float posX;
        private float posY;

        private MapData(String[] tileMap, float posX, float posY) {
            this.tileMap = tileMap;
            this.posX = posX;
            this.posY = posY;
        }

        public String[] getTileMap() {
            return tileMap;
        }

        public float getPosX() {
            return posX;
        }

        public float getPosY() {
            return posY;
        }
    }
}
